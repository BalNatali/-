#include <iostream>

class Node {
public:
	int data;
	Node* next;

	Node(int data) {
		this->data = data;
		this->next = nullptr;
	}
};

class LinkedList {
private:
	Node* head;

public:
	LinkedList() {
		head = nullptr;
	}

	void insert(int data) {
		Node* new_node = new Node(data);
		if (head == nullptr) {
			head = new_node;
		} else {
			Node* current = head;
			while (current->next != nullptr) {
				current = current->next;
			}
			current->next = new_node;
		}
	}

	void print() {
		Node* current = head;
		while (current != nullptr) {
			std::cout << current->data << " ";
			current = current->next;
		}
		std::cout << std::endl;
	}

	void insertionSort() {
		Node* current = head;
		Node* result = nullptr;

		while (current != nullptr) {
			Node* next = current->next;
			if (result == nullptr || current->data <= result->data) {
				current->next = result;
				result = current;
			} else {
				Node* temp = result;
				while (temp->next != nullptr && current->data > temp->next->data) {
					temp = temp->next;
				}
				current->next = temp->next;
				temp->next = current;
			}
			current = next;
		}
		head = result;
	}
};

int main() {
	LinkedList list;
	list.insert(3);
	list.insert(1);
	list.insert(1);
	list.insert(2);
	list.insert(4);

	std::cout << "Original list: ";
	list.print();

	list.insertionSort();

	std::cout << "Sorted list: ";

	list.print();

	return 0;
}